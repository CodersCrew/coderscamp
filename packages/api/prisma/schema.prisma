datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserProfile {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullName String
  email    String @unique
  image    String @default("https://www.gravatar.com/avatar?d=mp")
}

model AuthUser {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String @unique
  password String
  role     Role   @default(User)
}

model RegisteredEmails {
  userId String @id
  email  String @unique
}

model LearningMaterials {
  id           String @id
  url          String
  courseUserId String @unique
}

model Event {
  id          String   @id
  type        String
  occurredAt  DateTime
  data        Json
  metadata    Json
  globalOrder Int      @default(autoincrement())
  Stream      Stream[]
}

model Stream {
  streamId       String
  streamCategory String
  streamVersion  Int
  // HACK: allow insert empty eventId (1. guarantee) then events then update eventId (2. guarantee)
  // within one transaction to ensure all guarantees
  event          Event?  @relation(fields: [eventId], references: [id])
  eventId        String?

  // 1. guarantee stream consistency
  // 2. guarantee no event duplicates in stream
  @@unique([streamId, streamVersion])
  @@unique([streamId, eventId])
}

model Course {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateStart DateTime
  dateEnd   DateTime
}

enum Role {
  Admin
  User
}

model CourseProgress {
  id                              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseUserId                    String? @unique
  learningMaterialsId             String  @unique
  learningMaterialsCompletedTasks Int
}

model EventsSubscription {
  id              String   @id
  currentPosition Int
  fromPosition    Int
  eventTypes      String[]
}
